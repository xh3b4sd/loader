package main

// Template represents the template of the file being generated. It contains
// the asset map and methods to access them.
var Template = `// This file is generated by loader. Don't edit it manually. It is recommended
// to run loader via go generate. To do so put the following comment into your
// go source code and run go generate within your build process.
//
//     //go:generate loader generate
//
// For more information about the usage of loader check the help usage. For
// more information on go generate see
// https://golang.org/cmd/go/#hdr-Generate_Go_files_by_processing_source.
//
package {{.Package}}

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
)

// {{.MapName}} contains all loaded files. Map keys are file names. Map values
// are file contents.
var {{.MapName}} = map[string][]byte{{"{"}}{{range $fileName, $content := .AssetMap}}
		"{{$fileName}}": {{"{"}}{{range $x := $content}}{{$x}}, {{end}}{{"}"}},{{end}}
}

// {{.LoaderFuncPrefix}}ReadFile returns the content of the loaded asset
// associated to assetName. If the requested asset does not exist, an error is
// returned.
func {{.LoaderFuncPrefix}}ReadFile(assetName string) ([]byte, error) {
	if v, ok := {{.MapName}}[assetName]; ok {
		b := bytes.NewBuffer(v)
		r, err := gzip.NewReader(b)
		if err != nil {
			return nil, err
		}
		var raw bytes.Buffer
		io.Copy(&raw, r)
		r.Close()
		return raw.Bytes(), nil
	}

	return nil, fmt.Errorf("asset not found: %s", assetName)
}

// {{.LoaderFuncPrefix}}FileNames returns a list of file names of all loaded
// assets.
func {{.LoaderFuncPrefix}}FileNames() []string {
	var newFileNames []string

	for fileName := range {{.MapName}} {
		newFileNames = append(newFileNames, fileName)
	}

	return newFileNames
}`
